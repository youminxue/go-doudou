// Code generated by MockGen. DO NOT EDIT.
// Source: ./transport.go

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	memberlist "github.com/youminxue/odin/toolkit/memberlist"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// DialTimeout mocks base method.
func (m *MockTransport) DialTimeout(addr string, timeout time.Duration) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialTimeout", addr, timeout)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialTimeout indicates an expected call of DialTimeout.
func (mr *MockTransportMockRecorder) DialTimeout(addr, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialTimeout", reflect.TypeOf((*MockTransport)(nil).DialTimeout), addr, timeout)
}

// FinalAdvertiseAddr mocks base method.
func (m *MockTransport) FinalAdvertiseAddr(ip string, port int) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalAdvertiseAddr", ip, port)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FinalAdvertiseAddr indicates an expected call of FinalAdvertiseAddr.
func (mr *MockTransportMockRecorder) FinalAdvertiseAddr(ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalAdvertiseAddr", reflect.TypeOf((*MockTransport)(nil).FinalAdvertiseAddr), ip, port)
}

// PacketCh mocks base method.
func (m *MockTransport) PacketCh() <-chan *memberlist.Packet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PacketCh")
	ret0, _ := ret[0].(<-chan *memberlist.Packet)
	return ret0
}

// PacketCh indicates an expected call of PacketCh.
func (mr *MockTransportMockRecorder) PacketCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PacketCh", reflect.TypeOf((*MockTransport)(nil).PacketCh))
}

// Shutdown mocks base method.
func (m *MockTransport) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockTransportMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockTransport)(nil).Shutdown))
}

// StreamCh mocks base method.
func (m *MockTransport) StreamCh() <-chan net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamCh")
	ret0, _ := ret[0].(<-chan net.Conn)
	return ret0
}

// StreamCh indicates an expected call of StreamCh.
func (mr *MockTransportMockRecorder) StreamCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamCh", reflect.TypeOf((*MockTransport)(nil).StreamCh))
}

// WriteTo mocks base method.
func (m *MockTransport) WriteTo(b []byte, addr string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", b, addr)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockTransportMockRecorder) WriteTo(b, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockTransport)(nil).WriteTo), b, addr)
}

// MockIngestionAwareTransport is a mock of IngestionAwareTransport interface.
type MockIngestionAwareTransport struct {
	ctrl     *gomock.Controller
	recorder *MockIngestionAwareTransportMockRecorder
}

// MockIngestionAwareTransportMockRecorder is the mock recorder for MockIngestionAwareTransport.
type MockIngestionAwareTransportMockRecorder struct {
	mock *MockIngestionAwareTransport
}

// NewMockIngestionAwareTransport creates a new mock instance.
func NewMockIngestionAwareTransport(ctrl *gomock.Controller) *MockIngestionAwareTransport {
	mock := &MockIngestionAwareTransport{ctrl: ctrl}
	mock.recorder = &MockIngestionAwareTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngestionAwareTransport) EXPECT() *MockIngestionAwareTransportMockRecorder {
	return m.recorder
}

// IngestPacket mocks base method.
func (m *MockIngestionAwareTransport) IngestPacket(conn net.Conn, addr net.Addr, now time.Time, shouldClose bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestPacket", conn, addr, now, shouldClose)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestPacket indicates an expected call of IngestPacket.
func (mr *MockIngestionAwareTransportMockRecorder) IngestPacket(conn, addr, now, shouldClose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestPacket", reflect.TypeOf((*MockIngestionAwareTransport)(nil).IngestPacket), conn, addr, now, shouldClose)
}

// IngestStream mocks base method.
func (m *MockIngestionAwareTransport) IngestStream(conn net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestStream", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestStream indicates an expected call of IngestStream.
func (mr *MockIngestionAwareTransportMockRecorder) IngestStream(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestStream", reflect.TypeOf((*MockIngestionAwareTransport)(nil).IngestStream), conn)
}

// MockNodeAwareTransport is a mock of NodeAwareTransport interface.
type MockNodeAwareTransport struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAwareTransportMockRecorder
}

// MockNodeAwareTransportMockRecorder is the mock recorder for MockNodeAwareTransport.
type MockNodeAwareTransportMockRecorder struct {
	mock *MockNodeAwareTransport
}

// NewMockNodeAwareTransport creates a new mock instance.
func NewMockNodeAwareTransport(ctrl *gomock.Controller) *MockNodeAwareTransport {
	mock := &MockNodeAwareTransport{ctrl: ctrl}
	mock.recorder = &MockNodeAwareTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeAwareTransport) EXPECT() *MockNodeAwareTransportMockRecorder {
	return m.recorder
}

// DialAddressTimeout mocks base method.
func (m *MockNodeAwareTransport) DialAddressTimeout(addr memberlist.Address, timeout time.Duration) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialAddressTimeout", addr, timeout)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialAddressTimeout indicates an expected call of DialAddressTimeout.
func (mr *MockNodeAwareTransportMockRecorder) DialAddressTimeout(addr, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAddressTimeout", reflect.TypeOf((*MockNodeAwareTransport)(nil).DialAddressTimeout), addr, timeout)
}

// DialTimeout mocks base method.
func (m *MockNodeAwareTransport) DialTimeout(addr string, timeout time.Duration) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialTimeout", addr, timeout)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialTimeout indicates an expected call of DialTimeout.
func (mr *MockNodeAwareTransportMockRecorder) DialTimeout(addr, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialTimeout", reflect.TypeOf((*MockNodeAwareTransport)(nil).DialTimeout), addr, timeout)
}

// FinalAdvertiseAddr mocks base method.
func (m *MockNodeAwareTransport) FinalAdvertiseAddr(ip string, port int) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalAdvertiseAddr", ip, port)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FinalAdvertiseAddr indicates an expected call of FinalAdvertiseAddr.
func (mr *MockNodeAwareTransportMockRecorder) FinalAdvertiseAddr(ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalAdvertiseAddr", reflect.TypeOf((*MockNodeAwareTransport)(nil).FinalAdvertiseAddr), ip, port)
}

// PacketCh mocks base method.
func (m *MockNodeAwareTransport) PacketCh() <-chan *memberlist.Packet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PacketCh")
	ret0, _ := ret[0].(<-chan *memberlist.Packet)
	return ret0
}

// PacketCh indicates an expected call of PacketCh.
func (mr *MockNodeAwareTransportMockRecorder) PacketCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PacketCh", reflect.TypeOf((*MockNodeAwareTransport)(nil).PacketCh))
}

// Shutdown mocks base method.
func (m *MockNodeAwareTransport) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockNodeAwareTransportMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockNodeAwareTransport)(nil).Shutdown))
}

// StreamCh mocks base method.
func (m *MockNodeAwareTransport) StreamCh() <-chan net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamCh")
	ret0, _ := ret[0].(<-chan net.Conn)
	return ret0
}

// StreamCh indicates an expected call of StreamCh.
func (mr *MockNodeAwareTransportMockRecorder) StreamCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamCh", reflect.TypeOf((*MockNodeAwareTransport)(nil).StreamCh))
}

// WriteTo mocks base method.
func (m *MockNodeAwareTransport) WriteTo(b []byte, addr string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", b, addr)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockNodeAwareTransportMockRecorder) WriteTo(b, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockNodeAwareTransport)(nil).WriteTo), b, addr)
}

// WriteToAddress mocks base method.
func (m *MockNodeAwareTransport) WriteToAddress(b []byte, addr memberlist.Address) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToAddress", b, addr)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToAddress indicates an expected call of WriteToAddress.
func (mr *MockNodeAwareTransportMockRecorder) WriteToAddress(b, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToAddress", reflect.TypeOf((*MockNodeAwareTransport)(nil).WriteToAddress), b, addr)
}
