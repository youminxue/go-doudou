package codegen

import (
	"bytes"
	"github.com/youminxue/odin/version"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/sirupsen/logrus"
	"github.com/youminxue/odin/toolkit/astutils"
)

var annotationTmpl = `/**
* Generated by odin {{.Version}}.
* Don't edit!
*/
package grpc

import (
	"github.com/youminxue/odin/framework"
)

var MethodAnnotationStore = framework.AnnotationStore{
	{{- range $m := .Meta.Methods }}
	{{- if $m.Annotations }}
	"{{$m.Name}}Rpc": {
		{{- range $a := $m.Annotations }}
		{
			Name:   "{{ $a.Name }}",
			{{- if $a.Params }}
			Params: []string{
				{{- range $p := $a.Params }}
				"{{ $p }}",
				{{- end }}
			},
			{{- end }}
		},
		{{- end }}
	},
	{{- end }}
	{{- end }}
}
`

func GenMethodAnnotationStore(dir string, ic astutils.InterfaceCollector) {
	var (
		err            error
		annotationFile string
		f              *os.File
		tpl            *template.Template
		grpcDir        string
		source         string
		sqlBuf         bytes.Buffer
		fi             os.FileInfo
	)
	grpcDir = filepath.Join(dir, "transport/grpc")
	if err = os.MkdirAll(grpcDir, os.ModePerm); err != nil {
		panic(err)
	}
	annotationFile = filepath.Join(grpcDir, "annotation.go")
	fi, err = os.Stat(annotationFile)
	if err != nil && !os.IsNotExist(err) {
		panic(err)
	}
	if fi != nil {
		logrus.Warningln("file handler.go will be overwritten")
	}
	if f, err = os.Create(annotationFile); err != nil {
		panic(err)
	}
	defer f.Close()

	if tpl, err = template.New("annotation.go.tmpl").Parse(annotationTmpl); err != nil {
		panic(err)
	}
	if err = tpl.Execute(&sqlBuf, struct {
		Meta    astutils.InterfaceMeta
		Version string
	}{
		Meta:    ic.Interfaces[0],
		Version: version.Release,
	}); err != nil {
		panic(err)
	}
	source = strings.TrimSpace(sqlBuf.String())
	astutils.FixImport([]byte(source), annotationFile)
}
