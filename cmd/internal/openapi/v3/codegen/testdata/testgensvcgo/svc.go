/**
* Generated by go-doudou v2.0.4.
* You can edit it as your need.
*/
package service

import (
	"context"
	"testgensvcgo/dto"
	v3 "github.com/youminxue/v2/toolkit/openapi/v3"
)

//go:generate go-doudou svc http -c
//go:generate go-doudou svc grpc


// Testgensvcgo Prometheus HTTP API
// The current stable HTTP API is reachable under /api/v1 on a Prometheus server. Any non-breaking additions will be added under that endpoint.
// 
// # Format overview
// The API response format is JSON. Every successful API request returns a ```2xx``` status code.
// 
// Invalid requests that reach the API handlers return a JSON error object and one of the following HTTP response codes:
// 
// ```400 Bad Request``` when parameters are missing or incorrect.
// ```422 Unprocessable Entity``` when an expression can't be executed ([RFC4918](https://datatracker.ietf.org/doc/html/rfc4918#page-78)).
// ```503 Service Unavailable``` when queries time out or abort.
// 
// Other non-```2xx``` codes may be returned for errors occurring before the API endpoint is reached.
// 
// An array of warnings may be returned if there are errors that do not inhibit the request execution. All of the data that was successfully collected will be returned in the data field.
// 
// The JSON response envelope format is as follows:
// 
// ```
// {
//   "status": "success" | "error",
//   "data": <data>,
// 
//   // Only set if status is "error". The data field may still hold
//   // additional data.
//   "errorType": "<string>",
//   "error": "<string>",
// 
//   // Only if there were warnings while executing the request.
//   // There will still be data in the data field.
//   "warnings": ["<string>"]
// }
// ```
// # Generic placeholders:
// 
// ```<rfc3339 | unix_timestamp>```: Input timestamps may be provided either in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format or as a Unix timestamp in seconds, with optional decimal places for sub-second precision. Output timestamps are always represented as Unix timestamps in seconds.
// 
// ```<series_selector>```: Prometheus [time series selectors](https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors) like ```http_requests_total``` or ```http_requests_total{method=~"(GET|POST)"}``` and need to be URL-encoded.
// 
// ```<duration>```: [Prometheus duration strings](https://prometheus.io/docs/prometheus/latest/querying/basics/#time_durations). For example, ```5m``` refers to a duration of 5 minutes.
// 
// ```<bool>```: boolean values (strings ```true``` and ```false```).
// 
// **Note**: Names of query parameters that may be repeated end with ```[]```.
// 
// 
// v2
type Testgensvcgo interface {
	
	// AdminTsdbSnapshot Creates Snapshot of current data
	// Snapshot creates a snapshot of all current data into ```snapshots/<datetime>-<rand>``` under the TSDB's data directory and returns the directory as response. It will optionally skip snapshotting data that is only present in the head block, and which has not yet been compacted to disk.
	// 
	// New in v2.1 and supports PUT from v2.9
	// 
	AdminTsdbSnapshot(ctx context.Context, 
	// Skip data present in the head block. Optional.
	// 
	skip_head *bool) (
					 ret dto.ResponseSnapshot, err error)

	
	// DeleteSeries Returns time series
	// The following endpoint returns the list of time series that match a certain label set.
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large or dynamic number of series selectors that may breach server-side URL character limits.
	// 
	// The ```data``` section of the query result consists of a list of objects that contain the label name/value pairs which identify each series.
	// 
	// ---
	// **NOTE:** These API endpoints may return metadata for series for which there is no sample within the selected time range, and/or for series whose samples have been marked as deleted via the deletion API endpoint. The exact extent of additionally returned series metadata is an implementation detail that may change in the future.
	// 
	// ---
	// 
	DeleteSeries(ctx context.Context, 
	// Start timestamp. Optional.
	// 
	start *string,
	// End timestamp. Optional.
	// 
	end *string,
	// Repeated series selector argument that selects the series to return. At least one ```match[]``` argument must be provided.
	// 
	// Example: ```?' --data-urlencode 'match[]=up'```
	// 
	// required
	match[] string) (
					 ret dto.ResponseSeries, err error)

	
	// GetAlertmanagers Returns current alertmanager discovery
	// Returns an overview of the current state of the Prometheus alertmanager discovery
	// 
	// Both the active and dropped Alertmanagers are part of the response.
	// 
	GetAlertmanagers(ctx context.Context) (
					 ret dto.AlertmanagerDiscovery, err error)

	
	// GetAlerts Returns active alerts
	// The /alerts endpoint returns a list of all active alerts.
	// 
	// As the /alerts endpoint is fairly new, it does not have the same stability guarantees as the overarching API v1.
	// 
	GetAlerts(ctx context.Context) (
					 ret dto.Alert, err error)

	
	// GetLabel_Label_nameValues Returns label values
	// The following endpoint returns a list of label values for a provided label name
	// 
	// The ```data``` section of the JSON response is a list of string label values.
	// 
	// ---
	// **NOTE:** These API endpoints may return metadata for series for which there is no sample within the selected time range, and/or for series whose samples have been marked as deleted via the deletion API endpoint. The exact extent of additionally returned series metadata is an implementation detail that may change in the future.
	// 
	// ---
	// 
	GetLabel_Label_nameValues(ctx context.Context, 
	// Start timestamp. Optional.
	// 
	start *string,
	// End timestamp. Optional.
	// 
	end *string,
	// Repeated series selector argument that selects the series from which to read the label values. Optional.
	// 
	match[] *string,
	// Label name
	// 
	// Example: ```/label/job/values```
	// 
	// required
	label_name string) (
					 ret dto.ResponseLabelValues, err error)

	
	// GetLabels Returns label names
	// The following endpoint returns a list of label names
	// 
	// The ```data``` section of the JSON response is a list of string label names.
	// 
	// ---
	// **NOTE:** These API endpoints may return metadata for series for which there is no sample within the selected time range, and/or for series whose samples have been marked as deleted via the deletion API endpoint. The exact extent of additionally returned series metadata is an implementation detail that may change in the future.
	// 
	// ---
	// 
	GetLabels(ctx context.Context, 
	// Start timestamp. Optional.
	// 
	start *string,
	// End timestamp. Optional.
	// 
	end *string,
	// Repeated series selector argument that selects the series from which to read the label values. Optional.
	// 
	match[] *string) (
					 ret dto.ResponseLabelNames, err error)

	
	// GetMetadata Returns metric metadata
	// It returns metadata about metrics currently scrapped from targets. However, it does not provide any target information. This is considered experimental and might change in the future.
	// 
	// The data section of the query result consists of an object where each key is a metric name and each value is a list of unique metadata objects, as exposed for that metric name across all targets.
	// 
	GetMetadata(ctx context.Context, 
	// Maximum number of metrics to return.
	// 
	// Example: ```?limit=2```
	// 
	// required
	limit float64,
	// A metric name to filter metadata for. All metric metadata is retrieved if left empty.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	metric *string) (
					 ret map[string]dto.Metadata, err error)

	
	// GetQuery Evaluates instant query
	// The following endpoint evaluates an instant query at a single point in time
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large query that may breach server-side URL character limits.
	// 
	// The data section of the query result has the following format
	// ```
	// {
	//   "resultType": "matrix" | "vector" | "scalar" | "string",
	//   "result": <value>
	// }
	// ```
	// ```<value>``` refers to the query result data, which has varying formats depending on the ```resultType```. See the [expression query result formats](https://prometheus.io/docs/prometheus/latest/querying/api/#expression-query-result-formats).
	// 
	GetQuery(ctx context.Context, 
	// Prometheus expression query string.
	// 
	// Example: ```?query=up```
	// 
	// required
	query string,
	// Evaluation timestamp. Optional.
	// 
	// The current server time is used if the ```time``` parameter is omitted.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	time *string,
	// Evaluation timeout. Optional. Defaults to and is capped by the value of the ```-query.timeout``` flag.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	timeout *string) (
					 ret dto.QueryData, err error)

	
	// GetQuery_exemplars Returns list of Exemplars
	// This is <b>experimental</b> and might change in the future. The following endpoint returns a list of exemplars for a valid PromQL query for a specific time range
	// 
	GetQuery_exemplars(ctx context.Context, 
	// Prometheus expression query string.
	// 
	// Example: ```?query=test_exemplar_metric_total```
	// 
	// required
	query string,
	// Start timestamp.
	// 
	// Example: ```&start=2020-09-14T15:22:25.479Z```
	// 
	start *string,
	// End timestamp.
	// 
	// Example: ```&end=020-09-14T15:23:25.479Z```
	// 
	end *string) (
					 ret dto.ResponseQueryExemplars, err error)

	
	// GetQuery_range Evaluates query over range of time.
	// The following endpoint evaluates an expression query over a range of time
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large query that may breach server-side URL character limits.
	// 
	// The data section of the query result has the following format
	// ```
	// {
	//   "resultType": "matrix",
	//   "result": <value>
	// }
	// ```
	// For the format of the ```<value>``` placeholder, see the [range-vector result format](https://prometheus.io/docs/prometheus/latest/querying/api/#range-vectors).
	// 
	GetQuery_range(ctx context.Context, 
	// Prometheus expression query string.
	// 
	// Example: ```?query=up```
	// 
	// required
	query string,
	// Start timestamp.
	// 
	// Example: ```&start=2015-07-01T20:10:30.781Z```
	// 
	start *string,
	// End timestamp.
	// 
	// Example: ```&end=2015-07-01T20:11:00.781Z```
	// 
	end *string,
	// Query resolution step width in ```duration``` format or float number of seconds.
	// 
	// Example: ```&step=15s```
	// 
	step *string,
	// Evaluation timeout. Optional. Defaults to and is capped by the value of the ```-query.timeout``` flag.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	timeout *string) (
					 ret dto.ResponseQueryRange, err error)

	
	// GetRules Returns currently loaded rules
	// The ```/rules``` API endpoint returns a list of alerting and recording rules that are currently loaded. In addition it returns the currently active alerts fired by the Prometheus instance of each alerting rule.
	// 
	// As the ```/rules``` endpoint is fairly new, it does not have the same stability guarantees as the overarching API v1.
	GetRules(ctx context.Context, 
	// Return only the alerting rules (e.g. ```type=alert```) or the recording rules (e.g. ```type=record```). When the parameter is absent or empty, no filtering is done.
	// 
	type *string) (
					 ret dto.RuleDiscovery, err error)

	
	// GetSeries Returns time series
	// The following endpoint returns the list of time series that match a certain label set.
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large or dynamic number of series selectors that may breach server-side URL character limits.
	// 
	// The ```data``` section of the query result consists of a list of objects that contain the label name/value pairs which identify each series.
	// 
	GetSeries(ctx context.Context, 
	// Start timestamp. Optional.
	// 
	start *string,
	// End timestamp. Optional.
	// 
	end *string,
	// Repeated series selector argument that selects the series to return. At least one ```match[]``` argument must be provided.
	// 
	// Example: ```?' --data-urlencode 'match[]=up'```
	// 
	// required
	match[] string) (
					 ret dto.ResponseSeries, err error)

	
	// GetStatusBuildinfo Returns build information
	// The following endpoint returns various build information properties about the Prometheus server
	// 
	// All values are of the result type ```string```.
	// 
	// ---
	// **NOTE:** The exact returned build properties may change without notice between Prometheus versions.
	// 
	// ---
	// 
	// New in v2.14
	// 
	GetStatusBuildinfo(ctx context.Context) (
					 ret dto.PrometheusVersion, err error)

	
	// GetStatusConfig Returns configuration file
	// The following endpoint returns currently loaded configuration file
	// 
	// The config is returned as dumped YAML file. Due to limitation of
	// the YAML library, YAML comments are not included.
	// 
	GetStatusConfig(ctx context.Context) (
					 ret dto.PrometheusConfig, err error)

	
	// GetStatusFlags Returns flag values
	// The following endpoint returns flag values that Prometheus was configured with
	// 
	// All values are of the result type ```string```.
	// 
	// New in v2.2
	// 
	GetStatusFlags(ctx context.Context) (
					 ret interface{}, err error)

	
	// GetStatusRuntimeinfo Returns runtime info
	// The following endpoint returns various runtime information properties about the Prometheus server
	// 
	// The returned values are of different types, depending on the nature
	// of the runtime property
	// 
	// ---
	// **NOTE:** The exact returned runtime properties may change without notice between Prometheus versions.
	// 
	// ---
	// 
	// New in v2.14
	// 
	GetStatusRuntimeinfo(ctx context.Context) (
					 ret dto.RuntimeInfo, err error)

	
	// GetStatusTsdb Returns statistics about TSBD
	// The following endpoint returns various cardinality statistics about the Prometheus TSDB
	// 
	// Response Data
	// ---
	// 
	// **headStats:** This provides the following data about the head block of the TSDB:
	// >**numSeries:** The number of series.
	// **chunkCount:** The number of chunks.
	// **minTime:** The current minimum timestamp in milliseconds.
	// **maxTime:** The current maximum timestamp in milliseconds.
	// 
	// **seriesCountByMetricName:** This will provide a list of metrics names and their series count.
	// **labelValueCountByLabelName:** This will provide a list of the label names and their value count.
	// **memoryInBytesByLabelName:** This will provide a list of the label names and memory used in bytes. Memory usage is calculated by adding the length of all values for a given label name.
	// **seriesCountByLabelPair:** This will provide a list of label value pairs and their series count.
	// 
	GetStatusTsdb(ctx context.Context) (
					 ret dto.TsdbStatus, err error)

	
	// GetStatusWalreplay Returns info about WAL replay.
	// The following endpoint returns information about the WAL replay
	// 
	// Response Data
	// ---
	// 
	// **read:** The number of segments replayed so far. 
	// **total:** The total number segments needed to be replayed. 
	// **progress:** The progress of the replay (0 - 100%). 
	// **state:** The state of the replay. 
	// **Possible states:** 
	//   - **waiting:** Waiting for the replay to start. 
	//   - **in progress:** The replay is in progress. 
	//   - **done:** The replay has finished.
	//   
	// ---
	// **NOTE:** This endpoint is available before the server has been marked ready and is updated in real time to facilitate monitoring the progress of the WAL replay.
	// 
	// ---
	// 
	// New in v2.28
	// 
	GetStatusWalreplay(ctx context.Context) (
					 ret dto.WalReplayStatus, err error)

	
	// GetTargets Returns current target discovery.
	// Both the active and dropped targets are part of the response by default. ```labels``` represents the label set after relabelling has occurred. ```discoveredLabels``` represent the unmodified labels retrieved during service discovery before relabelling has occurred.
	// 
	GetTargets(ctx context.Context, 
	// The ```state``` query parameter allows the caller to filter by active or dropped targets, (e.g., ```state=active```, ```state=dropped```, ```state=any```).
	// 
	state *string) (
					 ret dto.TargetDiscovery, err error)

	
	// GetTargetsMetadata Returns target metadata
	// The following endpoint returns metadata about metrics currently scraped from targets. This is experimental and might change in the future.
	// 
	// The ```data``` section of the query result consists of a list of objects that contain metric metadata and the target label set.
	GetTargetsMetadata(ctx context.Context, 
	// Label selectors that match targets by their label sets. All targets are selected if left empty.
	// 
	// Example: ```match_target={job="prometheus"}```
	// 
	match_target *string,
	// A metric name to retrieve metadata for. All metric metadata is retrieved if left empty.
	// 
	// Example: ```metric=go_goroutines```
	// 
	metric *string,
	// Maximum number of targets to match.
	// 
	// Example: ```limit=2```
	// 
	limit *float64) (
					 ret dto.ResponseTargetMetadata, err error)

	
	// Labels Returns label names
	// The following endpoint returns a list of label names
	// 
	// The ```data``` section of the JSON response is a list of string label names.
	// 
	Labels(ctx context.Context, 
	// Start timestamp. Optional.
	// 
	start *string,
	// End timestamp. Optional.
	// 
	end *string,
	// Repeated series selector argument that selects the series from which to read the label values. Optional.
	// 
	match[] *string) (
					 ret dto.ResponseLabelNames, err error)

	
	// PutAdminTsdbSnapshot Creates Snapshot of current data
	// Snapshot creates a snapshot of all current data into ```snapshots/<datetime>-<rand>``` under the TSDB's data directory and returns the directory as response. It will optionally skip snapshotting data that is only present in the head block, and which has not yet been compacted to disk.
	// 
	// New in v2.1 and supports PUT from v2.9
	// 
	PutAdminTsdbSnapshot(ctx context.Context, 
	// Skip data present in the head block. Optional.
	// 
	skip_head *bool) (
					 ret dto.ResponseSnapshot, err error)

	
	// Query Evaluates instant query
	// The following endpoint evaluates an instant query at a single point in time
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large query that may breach server-side URL character limits.
	// 
	// The data section of the query result has the following format
	// ```
	// {
	//   "resultType": "matrix" | "vector" | "scalar" | "string",
	//   "result": <value>
	// }
	// ```
	// ```<value>``` refers to the query result data, which has varying formats depending on the ```resultType```. See the [expression query result formats](https://prometheus.io/docs/prometheus/latest/querying/api/#expression-query-result-formats).
	// 
	Query(ctx context.Context, 
	// Prometheus expression query string.
	// 
	// Example: ```?query=up```
	// 
	// required
	query string,
	// Evaluation timestamp. Optional.
	// 
	// The current server time is used if the ```time``` parameter is omitted.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	time *string,
	// Evaluation timeout. Optional. Defaults to and is capped by the value of the ```-query.timeout``` flag.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	timeout *string) (
					 ret dto.QueryData, err error)

	
	// Query_exemplars Returns list of Exemplars
	// This is <b>experimental</b> and might change in the future. The following endpoint returns a list of exemplars for a valid PromQL query for a specific time range
	// 
	Query_exemplars(ctx context.Context, 
	// Prometheus expression query string.
	// 
	// Example: ```?query=test_exemplar_metric_total```
	// 
	// required
	query string,
	// Start timestamp.
	// 
	// Example: ```&start=2020-09-14T15:22:25.479Z```
	// 
	start *string,
	// End timestamp.
	// 
	// Example: ```&end=020-09-14T15:23:25.479Z```
	// 
	end *string) (
					 ret dto.ResponseQueryExemplars, err error)

	
	// Query_range Evaluates query over range of time.
	// The following endpoint evaluates an expression query over a range of time
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large query that may breach server-side URL character limits.
	// 
	// The data section of the query result has the following format
	// ```
	// {
	//   "resultType": "matrix",
	//   "result": <value>
	// }
	// ```
	// For the format of the ```<value>``` placeholder, see the [range-vector result format](https://prometheus.io/docs/prometheus/latest/querying/api/#range-vectors).
	// 
	Query_range(ctx context.Context, 
	// Prometheus expression query string.
	// 
	// Example: ```?query=up```
	// 
	// required
	query string,
	// Start timestamp.
	// 
	// Example: ```&start=2015-07-01T20:10:30.781Z```
	// 
	start *string,
	// End timestamp.
	// 
	// Example: ```&end=2015-07-01T20:11:00.781Z```
	// 
	end *string,
	// Query resolution step width in ```duration``` format or float number of seconds.
	// 
	// Example: ```&step=15s```
	// 
	step *string,
	// Evaluation timeout. Optional. Defaults to and is capped by the value of the ```-query.timeout``` flag.
	// 
	// Example: ```?metric=http_requests_total```
	// 
	timeout *string) (
					 ret dto.ResponseQueryRange, err error)

	
	// Series Returns time series
	// The following endpoint returns the list of time series that match a certain label set.
	// 
	// You can URL-encode these parameters directly in the request body by using the ```POST``` method and ```Content-Type: application/x-www-form-urlencoded``` header. This is useful when specifying a large or dynamic number of series selectors that may breach server-side URL character limits.
	// 
	// The ```data``` section of the query result consists of a list of objects that contain the label name/value pairs which identify each series.
	// 
	Series(ctx context.Context, 
	// Start timestamp. Optional.
	// 
	start *string,
	// End timestamp. Optional.
	// 
	end *string,
	// Repeated series selector argument that selects the series to return. At least one ```match[]``` argument must be provided.
	// 
	// Example: ```?' --data-urlencode 'match[]=up'```
	// 
	// required
	match[] string) (
					 ret dto.ResponseSeries, err error)

	
}